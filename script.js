// Initialisation des blocs de jeu
const gameBoard = document.getElementById('game-board');
const blockNames = ['üß±', 'üå≥', 'üíé', 'üî•', 'üçû', 'üçñ', 'ü™ì', '‚öíÔ∏è'];
let blocks = [...blockNames, ...blockNames]; // Duplication pour le jeu m√©moire
let flippedCards = []; // Liste des cartes retourn√©es
let matchedCards = []; // Liste des cartes trouv√©es
let attempts = 0; // Compteur de tentatives

// M√©langer les √©l√©ments du tableau
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]]; // √âchanger les √©l√©ments
  }
}

shuffle(blocks); // M√©lange les blocs

// Cr√©er les cases de jeu dans la grille
blocks.forEach((block, index) => {
  const div = document.createElement('div');
  div.dataset.index = index;
  div.dataset.block = block;
  div.addEventListener('click', flipCard);
  div.addEventListener('mouseover', handleMouseOver);
  div.addEventListener('mouseleave', handleMouseLeave);
  gameBoard.appendChild(div);
});

// G√©rer l'effet de mouvement lorsque la souris passe au-dessus de la carte
function handleMouseOver() {
  this.style.transform = 'translateY(-10px)';
}

// R√©initialiser la position de la carte quand la souris quitte
function handleMouseLeave() {
  this.style.transform = 'translateY(0)';
}

// Retourner une carte
function flipCard() {
  if (flippedCards.length < 2 && !this.classList.contains('flipped') && !matchedCards.includes(this)) {
    this.classList.add('growing'); // Appliquer l'animation pour agrandir la carte
    setTimeout(() => {
      this.classList.add('flipped');
      this.textContent = this.dataset.block; // Afficher l'emoji du bloc
    }, 300); // Attendre la fin de l'animation d'agrandissement avant de la retourner

    flippedCards.push(this);

    // V√©rifier si deux cartes sont retourn√©es
    if (flippedCards.length === 2) {
      attempts++;
      document.getElementById('attempts').textContent = `Tentatives: ${attempts}`;

      // V√©rifier si les cartes correspondent
      if (flippedCards[0].dataset.block === flippedCards[1].dataset.block) {
        matchedCards.push(flippedCards[0], flippedCards[1]);
        flippedCards = []; // R√©initialiser les cartes retourn√©es
        checkGameWin();
      } else {
        // R√©initialiser les cartes apr√®s un d√©lai
        setTimeout(() => {
          flippedCards.forEach(card => {
            card.classList.remove('flipped');
            card.classList.remove('growing'); // Retirer l'animation de croissance
            card.textContent = ''; // Vider le contenu de la carte
          });
          flippedCards = [];
        }, 1000); // D√©lai pour r√©initialiser les cartes
      }
    }
  }
}

// V√©rifier si le jeu est gagn√©
function checkGameWin() {
  if (matchedCards.length === blocks.length) {
    document.getElementById('message').textContent = 'F√©licitations, vous avez gagn√© !';
  }
}
